#!/bin/bash
#https://www.sans.org/score/checklists/linux

# exit out if we're not root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

list_all_services() {
    service --status-all | less -P "le Services"
}

set_update_settings() {
    # these are the recommended settings set in software-properties-gtk
    apt_config=/etc/apt/apt.conf.d/10periodic
    echo "APT::Periodic::Update-Package-Lists \"1\";" > $apt_config
    echo "APT::Periodic::Download-Upgradeable-Packages \"1\";" >> $apt_config
    echo "APT::Periodic::AutocleanInterval \"0\";" >> $apt_config
    echo "APT::Periodic::Unattended-Upgrade \"1\";" >> $apt_config
    echo "Set apt update settings"
}

remove_hacking_tools()
{
    echo "$(tput setaf 2)Basically removing every program in Kali$(tput sgr0)"
    apt-get autoremove --purge --force-yes -y airbase-ng acccheck ace-voip amap apache-users arachni android-sdk apktool arduino armitage asleap automater \
	backdoor-factory bbqsql bed beef bing-ip2hosts binwalk blindelephant bluelog bluemaho bluepot blueranger bluesnarfer bulk-extractor \
	bully burpsuite braa \
	capstone casefile cdpsnarf cewl chntpw cisco-auditing-tool cisco-global-exploiter cisco-ocs cisco-torch cisco-router-config cmospwd \
	cookie-cadger commix cowpatty crackle creddump crunch cryptcat cymothoa copy-router-config cuckoo cutycapt \
	davtest dbd dbpwaudit dc3dd ddrescue deblaze dex2jar dff dhcpig dictstat dirb dirbuster distorm3 dmitry dnmap dns2tcp dnschef dnsenum \
	dnsmap dnsrecon dnstracer dnswalk doona dos2unix dotdotpwn dradis dumpzilla \
	eapmd5pass edb-debugger enum4linux enumiax exploitdb extundelete \
	fern-wifi-cracker fierce fiked fimap findmyhash firewalk fragroute foremost funkload \
	galleta ghost-fisher giskismet grabber go-lismero goofile gpp-decrypt gsad gsd gqrx guymager gr-scan \
	hamster-sidejack hash-identifier hexinject hexorbase http-tunnel httptunnel hping3 hydra \
	iaxflood inguma intrace inundator inviteflood ipv6-toolkit iphone-backup-analyzer intersect ismtp isr-evilgrade \
	jad javasnoop jboss-autopwn jd-gui john johnny joomscan jsql \
	kalibrate-rtl keepnote killerbee kismet keimpx \
	linux-exploit-suggester ldb lynis \
	maltego-teeth magictree masscan maskgen maskprocessor mdk3 metagoofil metasploit mfcuk mfoc mfterm miranda mitmproxy multiforcer \
	multimon-ng \
	ncrack netcat nishang nipper-ng nmap ntop \
	oclgausscrack ohwurm ollydpg openvas-administrator openvas-cli openvas-manager openvas-scanner oscanner \
	p0f padbuster paros parsero patator pdf-parser pdfid pdgmail peepdf phrasendrescher pipal pixiewps plecost polenum policygen \
	powerfuzzer powersploit protos-sip proxystrike pwnat \
	rcrack rcrack-mt reaver rebind recon-ng redfang regripper responder ridenum rsmangler rtlsdr-scanner rtpbreak rtpflood rtpinsertsound \
	rtpmixsound \
	sakis3g sbd sctpscan setoolkit sfuzz shellnoob sidguesser siparmyknife sipp sipvicious skipfish slowhttptest smali smtp-user-enum \
	sniffjoke snmpcheck spooftootph sslcaudit sslsplit sslstrip sslyze sqldict sqlmap sqlninja sqlsus statprocessor \
	t50 termineter thc-hydra thc-ipv6 thc-pptp-bruter thc-ssl-dos tnscmd10g truecrack theharverster tlssled twofi \
	u3-pwn uatester urlcrazy uniscan unix-privesc-check vega w3af webscarab webshag webshells webslayer websploit weevely wfuzz wifi-honey \
	wifitap wifite wireshark winexe wpscan wordlists valgrind volatility voiphopper wol-e xspy xplico xsser yara yersinia zaproxy
    echo "$(tput setaf 2)Hacking tools should be removed now$(tput sgr0)"
}

disable_ssh_root_login() {
    if [[ -f /etc/ssh/sshd_config ]]; then
        sed -i 's/PermitRootLogin .*/PermitRootLogin no/g' /etc/ssh/sshd_config
    else
        echo "No SSH server detected so nothing changed"
    fi
    echo "Disabled SSH root login"
}

find_media_files_in_dir() {
    mediaroot="/home/"
    mimes="image/\|video/\|audio/\|model/\|music/"
    pushd $mediaroot > /dev/null
    find -type f -print0 | xargs -0 file --mime-type | grep $mimes | less -P "le Media Files"
    popd > /dev/null
}

enable_repositories() {
    echo "#deb cdrom:[Ubuntu 12.04.1 LTS _Precise Pangolin_ - Release i386 (20120817.3)]/ precise main restricted
    deb http://us.archive.ubuntu.com/ubuntu/ precise main restricted
    deb-src http://us.archive.ubuntu.com/ubuntu/ precise main restricted
    deb http://us.archive.ubuntu.com/ubuntu/ precise-updates main restricted
    deb-src http://us.archive.ubuntu.com/ubuntu/ precise-updates main restricted
    deb http://us.archive.ubuntu.com/ubuntu/ precise universe
    deb-src http://us.archive.ubuntu.com/ubuntu/ precise universe
    deb http://us.archive.ubuntu.com/ubuntu/ precise-updates universe
    deb-src http://us.archive.ubuntu.com/ubuntu/ precise-updates universe
    deb http://us.archive.ubuntu.com/ubuntu/ precise multiverse
    deb-src http://us.archive.ubuntu.com/ubuntu/ precise multiverse
    deb http://us.archive.ubuntu.com/ubuntu/ precise-updates multiverse
    deb-src http://us.archive.ubuntu.com/ubuntu/ precise-updates multiverse
    deb http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
    deb-src http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
    deb http://security.ubuntu.com/ubuntu precise-security main restricted
    deb-src http://security.ubuntu.com/ubuntu precise-security main restricted
    deb http://security.ubuntu.com/ubuntu precise-security universe
    deb-src http://security.ubuntu.com/ubuntu precise-security universe
    deb http://security.ubuntu.com/ubuntu precise-security multiverse
    deb-src http://security.ubuntu.com/ubuntu precise-security multiverse
    # deb http://archive.canonical.com/ubuntu precise partner
    # deb-src http://archive.canonical.com/ubuntu precise partner
    deb http://extras.ubuntu.com/ubuntu precise main
    deb-src http://extras.ubuntu.com/ubuntu precise main" > /etc/apt/sources.list
    echo "created standard sources.list."
}

preserve_root_uid() {
    if [[ $(grep root /etc/passwd | wc -l) -gt 1 ]]; then
        grep root /etc/passwd | wc -l
    else
        echo "UID 0 is reserved to root"
    fi
}

remove_hacking_tools() {
    # Why not?
    apt-get autoremove --purge john netcat nmap hydra aircrack-ng
    echo "Hacking tools should be removed now"
}

check_no_pass() {
    sed -i s/NOPASSWD:// /etc/sudoers
    echo "Removed any instances of NOPASSWD in sudoers"
}

list_sensitive_groups() {
    echo "Members of group 'adm':"
    grep adm /etc/group | cut -d ':' -f 4
    echo "Members of group 'root':"
    grep root /etc/group | cut -d ':' -f 4
    echo "Members of group 'sudo':"
    grep sudo /etc/group | cut -d ':' -f 4
}

change_user_passwords() {
    pass='CyberPatriot!'
    echo "Changing all user passwords to $pass"
    echo 'NEVER RUN THIS IN A PRODUCTION IMAGE!'
    for i in $(ls /home); do # ls like a boss
        # globs be hatin on us
        chpasswd <<< "$i:$pass"
    done
}

disable_guest_account() {
    echo 'allow-guest=false' >> /etc/lightdm/lightdm.conf
    echo "Disabled guest account."
}

setup_password_history() {
    echo "Setting up password history.."
    # making these seperate commands for readability's sake as well as mutability.
    sed -i.bak -e 's/PASS_MAX_DAYS\t[[:digit:]]\+/PASS_MAX_DAYS\t90/' /etc/login.defs
    sed -i -e 's/PASS_MIN_DAYS\t[[:digit:]]\+/PASS_MIN_DAYS\t10/' /etc/login.defs
    sed -i -e 's/PASS_WARN_AGE\t[[:digit:]]\+/PASS_WARN_AGE\t7/' /etc/login.defs
    echo "Max days set to: 90, Min days: 10, Warn age: 7."
}

disable_root_account() {
  passwd -l root
  echo "Locked root account."
}

echo "##### Setting apt update settings #####"
set_update_settings

echo "##### Enabling default apt repositoriess #####"
enable_repositories

echo "##### Disabling SSH root login #####"
disable_ssh_root_login

echo "##### Making sure root is the only user with UID 0 #####"
preserve_root_uid

echo "##### Removing any 'hacking tools' from system #####"
remove_hacking_tools

echo "##### Listing all currently active services #####"
list_all_services

echo "##### Removing any instances of NOPASSWD in /etc/sudoers #####"
check_no_pass

echo "##### Searching for any media files in /home #####"
find_media_files_in_dir

echo "##### Disabling the guest account #####"
disableGuestAccount

echo "##### Setting up password history #####"
setup_password_history

read -p "Would you like to change all user passwords?" answer
if [[ $answer == [yY] ]]; then
    change_user_passwords
else
    echo "Not changing user passwords"
fi

read -p "Would you like to lock the root account?" answer
if [[ $answer == [yY] ]]; then
    disable_root_account
else
    echo "Not locking root account."

echo "##### Listing users in sensitive groups #####"
list_sensitive_groups
