#!/bin/bash
#Linux CYBERSTEM interactive manual, V.9
GREEN="\e[1;32m"
RED="\e[1;31m"
YELLOW="\e[1;33m"
COEND="\e[0m"

start() #Starts the function
{
        echo -e "\e[1;33m Starting program... \e[0m"
        
}

menu() #Starting of the menu
{
	clear
		echo "----------------------------------------------------"
        echo -e "$YELLOW Which operation would you like to run...? $COEND"
        echo -e "$GREEN [1] Start $COEND" #Shows the option of 1 or 2 to be processed
        echo -e "$RED [2] Exit $COEND"
		echo "----------------------------------------------------"
		date
		uptime
        read START_MENU #Reads the input of the keyboard and then the variable


        case $START_MENU in
        1)
                echo -e "$YELLOW Loading... $COEND"
                sleep 1 #Pauses for one second
                clear
                start #Moves on with the rest

                 ;;

        2)
                echo -e "$RED [!] Exiting program... $COEND"
                sleep 1
                clear
                exit #Closes the script, overall

                ;;

        *) #Asterisk to bring it back
                echo -e "$YELLOW Invaid input, redirecting... $COEND"
                sleep 1
                clear
                menu #Refers to the menu options
                ;;

        esac #Closing area
}

menu #Refers the menu outside of the function


while [ true ]
	do
	clear
	break
done

begin()
{

}

menu2()
{

	echo -e "$YELLOW ######Lesson Selection Menu################################ $COEND"
	echo -e "$RED ~If editable, DO NOT EDIT ANY TEXT FILES!~ $COEND" #Text in RED
	printf "[1] Basic Linux Navigation\n"
	printf "[2] Administrative Capabilities\n"
	printf "[3] Service Management\n"
	printf "[4] Security Updates\n"
	printf "[5] Guest Accounts and Root Login\n"
	printf "[6] Account Policy and Secure Lockout\n"
	printf "[7] Processes and Finding Files\n"
	printf "[8] Hidden Users and Groups\n"
	printf "[9] User Accounts\n"
	printf "[10] Sudoers file and Insecure Root Password\n"
	printf "[11] System Log Checking\n"
	echo -e "$RED [12] Exit Program $COEND"
	echo -e "$GREEN ------------------------------------------------------------ $COEND"
	read begin_menu2


	case $begin_menu2 in
	1)
		sleep 1
		clear
		menu3
		
		;;
		
	2)
		sleep 1
		clear
		cat Administration.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
		
	3)
		sleep 1
		clear
		cat Service.txt
		read WAIT_FOR_USER
		clear
		menu2
	
		;;
		
	4)
		sleep 1
		clear
		cat SecUpdates.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
		
	5)
		sleep 1
		clear
		cat GuestandRoot.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
		
	6)
		sleep 1
		clear
		cat PolicyAccount.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
	
	7)
		sleep 1
		clear
		cat ProcFile.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
		
	8)
		sleep 1
		clear
		cat UsrGroup.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
		
	9)
		sleep 1
		clear
		cat Accounts.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
		
	10)
		sleep 1
		clear
		cat VisudoandPasswd.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
		
	11)
		sleep 1
		clear
		cat SysLog.txt
		read WAIT_FOR_USER
		clear
		menu2
		
		;;
		
	12)
		echo -e "$RED [!] Exiting. $COEND"
		sleep 1
		clear
		exit
		
		;;
		
	*)
		echo -e "$RED [!] Invalid Input, Redirecting... $COEND"
		sleep 1
		clear
		menu2
		;;
	
	esac
}

menu2


nav1()
{

}

menu3()
{

	echo "#############################################################################"
	echo -e "$YELLOW Navigational Commands $COEND"
	echo "With bash scripting and knowing your Linux OS, navigation plays a big part"	
	echo "Generally a new Linux user would want to know the basics, such as..."
	echo "* Commands such as cp, mv, rm, touch, mkdir, cd, cd $DIRECTORY, ls, ls -a"
	echo "CP: CP is to copy a file, EX: cp duck.txt"
	echo "RM: RM is to remove a file, EX: rm duck.txt"
	echo "MV: MV is to move a file, EX: mv duck.txt Desktop"
	echo "TOUCH: TOUCH is to create a new text file, EX: touch duck.txt"
	echo "MKDIR: MKDIR is to make a directory, EX: mkdir CYBERSTEM"
	echo "CD: CD is a navigational command to bring you into a directory or out of one, EX: cd /home, cd.."
	echo "cd.. simply brings you to your previous position while in command line."
	echo "LS: LS shows you hidden files or all the files in a directory, EX: ls, ls -a"
	echo "CAT: The CAT command is used to view files, generally text."
	echo "SEE: The SEE command is used to view files but in a image format."
	echo -e "$YELLOW ~You can check out some sample outputs by testing them by entering 1 $COEND"
	echo "[1] Sample outputs"
	echo -e "$RED [2] Back to Lesson Menu $COEND"
	echo -e "$GREEN ------------------------------------------------------------ $COEND"
	read nav1_menu3


	case $nav1_menu3 in
	1)
		sleep 1
		clear
		cat Navigation.txt
		read WAIT_FOR_USER
		clear
		menu4
		
		;;

		
	2)
		echo -e "$RED [!] Exiting. $COEND"
		sleep 1
		clear
		exit
		menu2
		
		;;
		
	*)
		echo -e "$RED [!] Invalid Input, Redirecting... $COEND"
		sleep 1
		clear
		menu3
		;;
	
	esac
}

menu3


nav2()
{

}

menu4()
{

	echo "#############################################################################"
	echo -e "$YELLOW Navigational Outputs $COEND"
	printf "[1] CD\n" 
	printf "[2] CP\n"
	printf "[3] MV\n"
	printf "[4] RM\n"
	printf "[5] TOUCH\n"
	printf "[6] MKDIR\n"
	printf "[7] CD..\n"
	printf "[8] LS\n"
	printf "[9] LS -a\n"
	printf "[10] CAT\n"
	printf "[11] SEE\n"
	printf "[12] TAR\n"
	printf "[13] GREP\n"
	echo -e "$RED [14] Back to Lesson Menu $COEND"
	echo -e "$GREEN ------------------------------------------------------------ $COEND"
	read nav1_menu4


	case $nav2_menu3 in
	1)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4
		
		;;

		
	2)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4
		
		;;
	
	3)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;
	
	4)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4
		
		;;
	
	5)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4
		
		;;
	
	6)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;

	7)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;

	8)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;

	9)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;

	10)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;

	11)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;

	12)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;


	13)
		sleep 1
		clear
		read USER_INPUT
		
		read WAIT_FOR_USER
		clear
		menu4

		;;


	14)
		sleep 1
		clear
		menu2

		;;


	*)
		echo -e "$RED [!] Invalid Input, Redirecting... $COEND"
		sleep 1
		clear
		menu4
		;;
	
	esac
}

menu4


admin1()
{

}

menu5()
{

	echo "#############################################################################"
	echo -e "$YELLOW Administrative priveledges $COEND"
	echo "Knowing the administrative priveledges set on your machine and the machine of others"
	echo "is really important when your managing something or just making something more secure in general"
	echo "There are many things you'll need to worry about when thinking of -administration-"
	echo "1) User accounts, now user accounts are very important, you don't want the guest account active."
	echo "Nor do you want any invasive accounts that shouldn't be there, well there."
	echo "Nor do you want any normal user accounts set as administrative per say."
	echo "2) SUDO, Sudo stands for -Super User DO- Sudo is basically your admin rights other than ROOT."
	echo "SUDO is basically a smaller version of ROOT you could say, you have administrative priveledges but not the whole shebang."
	echo "Sudo is generally paired with different commands to authorize something."
	echo "3) Free: Free command shows free, total and swap memory information in bytes."
	echo "[1] Sample Command Mixtures"
	echo -e "$RED [2] Back to Lesson Menu $COEND"
	echo -e "$GREEN ------------------------------------------------------------ $COEND"
	read admin1_menu5


	case $admin1_menu5 in
	1)
		sleep 1
		clear
		menu5
		
		;;

		
	2)
		echo -e "$RED [!] Exiting. $COEND"
		sleep 1
		clear
		exit
		menu2
		
		;;
		
	*)
		echo -e "$RED [!] Invalid Input, Redirecting... $COEND"
		sleep 1
		clear
		menu5
		;;
	
	esac
}

menu5



admin2()
{

}

menu6()
{

	echo "#############################################################################"
	echo -e "$YELLOW Administrative Outputs $COEND"
	printf "[1] Command1\n"
	printf "[2] Command2\n"
	printf "[3] Command3\n"
	printf "[4] Command4\n"
	echo -e "$RED [5] Back to Lesson Menu $COEND"
	echo -e "$GREEN ------------------------------------------------------------ $COEND"
	read admin2_menu6


	case $admin2_menu6 in
	1)
		echo ""
		sleep 1
		clear
		menu6
		
		;;

		
	2)
		echo ""
		sleep 1
		clear
		menu6
		
		;;

	3)
		echo ""
		sleep 1
		clear
		menu6
		
		;;

	4)
		echo ""
		sleep 1
		clear
		menu6
		
		;;

	5)
		echo -e "$RED [!] Exiting. $COEND"
		sleep 1
		clear
		exit
		menu2
		
		;;
		
	*)
		echo -e "$RED [!] Invalid Input, Redirecting... $COEND"
		sleep 1
		clear
		menu6
		;;
	
	esac
}

menu6
