#!/bin/bash
#V14
#!/bin/bash

### Color Output
RED="\033[01;31m"      # Errors
GREEN="\033[01;32m"    # Success
YELLOW="\033[01;33m"   # Warnings/Information
BLUE="\033[01;34m"     # Heading
BOLD="\033[01;01m"     # Highlight
COEND="/e[0m"          # Ending Phrase
RESET="\033[00m"       # Normal

# Installing HTOP
htop(){
	if [ $(dpkg-query -W -f='${Status}' htop 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
		echo -e "$BLUE dpkg-query: [-] No packages found matching 'htop'."
		echo "Would you like to install HTOP? (y/n)"             			#Checks to see if htop is installed or not.
		echo " -------------------------------------"            		    #If it is installed then it will direct you to the second if statement.
		read $REPLY                                                         #If it isn't installed it will direct you to the first if statement.
																			#If it isn't installed you will be prompted with a choice to install or not.
		if [ $REPLY = 'y' ]; then                                           #If it is installed it will tell you if packages are detected + some other info then
			apt-get install htop                                            #direct you to the htop utility, your original request.
		if [ $? -eq 0 ]; then
			echo -e "$GREEN [+] HTOP has successfully been installed.. $COEND"
		else
			echo -e "$RED [!] Installation was unsuccessful.. $COEND"
		fi
	else
		sleep 1
		clear
		menu2
	fi

	if [ $(dpkg-query -W -f='${Status}' htop 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
		dpkg-query -l htop
		echo -e "$GREEN dpkg-query: [+] Packages found matching 'htop'. $COEND"
	else
		echo -e "$RED dpkg-query: [!] No packages found matching 'htop'. $COEND"
		sleep 1
	fi
}

# Put executable setup here
exec(){
	asdfs

	daf
	asdfsdf
	accountfsd
}

# Media File Finder
media(){
	echo "Listing all media files"
	echo "------------------------------------------------------------"
	find / -name "*.mp3"
	find / -name "*.mp4"
	find / -name "*.gif"
	find / -name "*.jpg"
	find / -name "*.jpeg"
	find / -name "*.png"
	find / -name "*.exe"

	read WAIT_FOR_USER

	if [ $? -eq 0 ]; then
		echo -e "$Green [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi

	sleep 1
}

# Users/Group
users(){
	# Moving important files to UGP dir.
	mkdir UGP
	cp /etc/passwd UGP
	cp /etc/group UGP
	cp /etc/shadow UGP

	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1

# Change ROOT passwd.
	echo "Please change the root passwd."
	passwd

	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1

# Disable ROOT account
	echo "root:"'$1$FvmieeAj$cDmFLn5RvjYphj3iL1RJZ/' | chpasswd -e
	passwd -l root  2>&1>/dev/null
	echo "[+] Root account has been locked."

	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1

# Guest Account
	sed -i 's/allow-guest=true/allow-guest=false/g' /etc/lightdm/lightdm.conf 2>&1>/dev/null
	if grep -q "allow-guest=false" /etc/lightdm/lightdm.conf; then
		echo "[+] Guest account already disabled!"
	else
		echo "allow-guest=false" >> /etc/lightdm/lightdm.conf
	fi
	echo "[+] Guest account disabled. (lightdm)"

	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1

# Hide userlist from login screen
    sed -i 's/greeter-hide-users=false/greeter-hide-users=true/g' /etc/lightdm/lightdm.conf 2>&1>/dev/null
    if grep -q "greeter-hide-users=false" /etc/lightdm/lightdm.conf; then
        echo "[+] User list already hidden!"
    else
        echo "greeter-hide-users=true" >> /etc/lightdm/lightdm.conf
    fi
    echo "[+] User list hidden from login screen. (lightdm)"
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
}

# Updates
	updates(){
	echo "Updating/Upgrading"
	sleep 1
	apt-get update && apt-get dist-upgrade

	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] System has been updated.. $COEND"
	else
		echo -e "$RED [!] Update unsuccessful.. $COEND"
	fi

	sleep 1
}

# SSH
ssh(){
	echo "Permitting SSH ROOT login to 'no'"
	sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config

	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi

	sleep 1
}

# Firewall
firewall(){

	#Configures the firewall, resets/enables/lists/asks if port 22 is allowed.
	ufw default deny
	ufw enable
	ufw status numbered
	
	# Allow port 22?
	echo "Would you like to allow port 22? (y/n)"
	read $ANSWER
	
	if [ $ANSWER = 'y' ]; then
		ufw allow 22
		echo "Port 22 is allowed."
	else
		echo "Port 22 is not allowed."
		sleep 1
	fi
}

# Cron
cron(){

    # Check scheduled jobs
    echo "[+] Listing /etc/cron* directories"
    ls -la /etc/cron*
    echo "[+] Listing root crontab"
    crontab -l
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
}

# Services
services()
{
echo ""

}

menu1()
{
clear
echo "#################################################################"
printf "[1] Remove Telnet\n"
printf "[2] Remove Apache\n"
printf "[3] Remove SSH\n"
printf "[4] Remove Very Secure FTP Daemon -VSFTPD-\n"
printf "[5] Remove Bind9 (DNS Server)\n"
printf "[6] Install Apache\n"
printf "[7] Install SSH\n"
printf "[8] Exit\n"
echo -e "$GREEN -----------------------------------------------------------"
read services_menu1

case $services_menu1 in
1)
	echo -e "$RED [!] Removing Telnet $COEND"
	apt-get -purge remove telnet
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
	clear
	menu1
	
	;;
	
2)
	echo -e "$RED [!] Removing Apache $COEND"
	service apache2 stop
	apt-get -purge remove apache2
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
	clear
	menu1
	
	;;
	
3)
	echo -e "$RED [!] Removing SSH $COEND"
	service ssh stop
	apt-get -purge remove ssh
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
	clear
	menu1
	
	;;
	
4)
	echo -e "$RED [!] Removing VSFTPD $COEND"
	service vsftpd stop
	apt-get -purge remove vsftpd
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
	clear
	menu1
	
	;;
	
5)
	echo -e "$RED [!] Removing Bind9 (DNS Server) $COEND"
	service bind9 stop
	apt-get -purge remove bind9
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
	clear
	menu1
	
	;;
	
6)
	echo -e "$GREEN [+] Installing Apache $COEND"
	apt-get install apache2
	service apache2 start
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
	clear
	menu1
	
	;;
	
7)
	echo -e "$GREEN [+] Installing SSH $COEND"
	apt-get install ssh
	service ssh start
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success.. $COEND"
	else
		echo -e "$RED [!] Unsuccessful.. $COEND"
	fi
	
	sleep 1
	clear
	menu1
	
	;;
	
8)
	sleep 1
	clear
	exit
	
	;;
	
*)
	echo -e "$RED [!] Invalid Input.. $COEND"
	sleep 1
	clear
	menu1
	;;
	esac
}

menu1
