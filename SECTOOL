#!/bin/bash
#RUN THIS SCRIPT AS ROOT
#V12
GREEN="/e[1;32m"
YELLOW="/e[1;33m"
RED="/e[1;31m"
COEND="/e[0m"

start()
{
echo "Starting Program..."

}

menu()
{

clear 
echo "-------------------------------------------------------"
echo -e "$GREEN ~CYBER COMPETITION TOOL $COEND"
printf "What would you like to do?\n"
echo -e "$GREEN [1] Start $COEND"
echo -e "$RED [2] Exit $COEND"
echo "[3] Readme"
echo "-------------------------------------------------------"
date
uptime
read start_menu

case $start_menu in
1)
	echo -e "\$YELLOW Starting SECTOOL... $COEND"
	clear
	start

	;;

2)
	echo -e "$RED [!] Shutting down... $COEND"
	clear
	exit

	;;

3)
	echo "Go here for some clean configuration file examples."
	echo -e "$YELLOW https://github.com/cquick97/security-scripts/tree/master/Linux $COEND"
	
	;;
	
*)
	echo -e "$RED [!] Invalid Input $COEND"
	sleep 1
	menu
	;;
	esac
}

menu

mkdir SECTOOLTXT

begin()
{
echo ""

}

menu2()
{
clear
echo -e "$YELLOW ########################################################### $COEND"
printf "[1] Prohibited Media File Finder\n"
printf "[2] Updater\n"
printf "[3] SSH Root Login\n"
printf "[4] Insecure Root Passwd\n"
printf "[5] System Logs\n"
printf "[6] User List Copy\n"
printf "[7] Group List Copy\n"
printf "[8] Service Section\n"
printf "[9] Login.defs\n"
printf "[10] Common-Password\n"
printf "[11] Guest Account 12.04\n"
printf "[12] Guest Account 14.04\n"
printf "[13] RkHunter\n"
printf "[14] Executable Setup\n"
printf "[15] Ping\n"
printf "[16] Firewall\n"
printf "[17] Listening Ports\n"
printf "[18] Sudoers\n"
printf "[19] Crontab\n"
printf "[20] Procceses\n"
printf "[21] User Account Config\n"
printf "[22] HTOP\n"
echo -e "$RED [23] Exit #COEND"
echo -e "$GREEN ----------------------------------------------------------- $COEND"
read begin_menu2

case $begin_menu2 in
1)
	echo -e "$YELLOW Presenting all media files with possible prohibited extensions $COEND"
	echo "------------------------------------------------------------"
	find / -name "*.mp3"
	find / -name "*.mp4"
	find / -name "*.gif"
	find / -name "*.jpg"
	find / -name "*.jpeg"
	find / -name "*.png"
	find / -name "*.exe"
	if [ $? -eq 0 ]; then
	    echo -e "$GREEN [+] Success... $COEND"
	else
        echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read SEARCH_RESULTS
	clear
	menu2
	
	;;
	
2)
	echo -e "$YELLOW Updating... $COEND"
	apt-get update && apt-get dist-upgrade
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
3)
	echo -e "$RED [!] Permitting Root Login to NO. $COEND"
	sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
	if [ $? -eq ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccesful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
4)
	echo -e "$YELLOW Input New Root Passwd $COEND"
	passwd
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccesful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
5)
	echo -e "$YELLOW Installing Gnome System Log Viewer $COEND"
	apt-get install gnome
	gnome-system-logs
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+} Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
6)
	echo -e "$YELLOW Writing Users to -SECTOOLTXT- $COEND"
	cp /etc/passwd SECTOOLTXT
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
7)
	echo -e "$YELLOW Writing groups to -SECTOOLTXT- $COEND"
	cp /etc/group SECTOOLTXT
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
8)
	echo -e "$YELLOW Presenting Services $COEND"
	service --status-all
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful...$COEND"
	fi
	read WAIT_FOR_USER
	sleep 1
	clear
	menu3
	
	;;
	
9)
	echo -e "$YELLOW Password Policy Section $COEND"
	nano /etc/pam.d/login.defs
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
10)
	echo -e "$YELLOW Account Policy Section $COEND"
	nano /etc/pam.d/common-password
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
11)
	echo -e "$YELLOW Guest Account 12.04 $COEND"
	gedit /etc/lightdm/lightdm.conf #allow-guest= false | greeter-hide-users= true
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
12)
	echo -e "$YELLOW Guest Account 14.04 $COEND"
	cd /usr/share/lightdm/lightdm.conf.d/ #allow-guest= false | greeter-hide-users= true
	gedit 50-ubuntu.conf
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
13)
	echo -e "$RED [!] Beginning RkHunter Installation... $COEND"
	apt-get install chkrootkit
	apt-get install rkhunter
	rhkunter --update
	clear
	sleep 1
	rkhunter -c #SCANS FOR VULNERABILITIES
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read VIEW_MATERIAL
	clear
	menu2
	
	;;
	
14)
	echo -e "$RED [!] Setting Executable From All Directories... $COEND"
	sleep 1
	chmod +x SECTOOL
	cp SECTOOL /usr/bin/SECTOOL
	cp SECTOOL /usr/local/bin
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
		clear
		menu2
	fi
	echo -e "$GREEN ~You are now able to type <SECTOOL>in any directory to recall this tool~ $COEND"
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
15)
	echo -e "$YELLOW Enter an IP address or domain... $COEND"
	echo "------------------------------------------------------------"
	read INPUT
	ping $INPUT
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
16)
	clear
	menu4
	
	;;
	
17)
	netstat -tulpna #apt-get purge netcat | apt-get purge --auto-remove netcat | apt-get remove netcat | apt-get remove --autoremove netca
	if [ $? -eq 0 ]; then
		echo -e "$GREEN Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	echo -e "$RED [!] Check the 'crontab -e' & '/etc/rc.local' as well as they could have backdoors $COEND"
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
18)
	cd /etc/sudoers.d #VISUDO
	ls
	echo -e "$RED [!] EX. of dirty file http://prntscr.com/5rq01o $COEND"
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessfu... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
19)
	crontab -e
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
20)
	echo "Demonstration of process layout"
	ps -A
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu2
	
	;;
	
21) #pam_tally.so deny=5 unlock_time=900 onerr=fail audit even_deny_root_account silent I PUT THIS HERE BECAUSE I CAN!
	clear
	menu5
	
	;;
	
22)
	dpkg -s htop
	echo "Would you like to install htop? (y/n)"   #Checks to see if htop is installed
	read $REPLY                                    #then you can choose to install it or not.
	                                               #If it's Y then it will install if it is
   if [ $REPLY = 'y' ]; then                       #N then it will go straight to HTOP ingoring install.
		apt-get install htop
			if [ $? -eq 0 ]; then
				echo -e "$GREEN [+] Success... $COEND"
			else
				echo -e "$RED [!] Unsuccessful... $COEND"
			fi
		read WAIT_FOR_USER
		clear
		menu2
	else
		echo -e "$RED [!] HTOP is already installed on this machine $COEND"
		echo -e "Starting HTOP..."
		sleep 1
		htop
   fi
   
   clear
   menu2
   
	;;
	
23)
	echo -e "$RED [!] Shutting down... $COEND"
	sleep 1
	clear
	exit
	
	;;
	
*)
	echo -e "$RED [!] Invalid Input $COEND"
	sleep 1
	clear
	menu2
	;;
	esac
}

menu2

test()
{
echo "Starting Selection..."

}

menu3()
{
clear
echo -e "$YELLOW #########~Would you like to remove any services...?~################### $COEND"
printf "[1] Remove Telnet\n"
printf "[2] Remove Apache\n"
printf "[3] Remove OpenSSH\n"
printf "[4] Remove Very Secure FTP Daemon -VSFTPD-\n"
printf "[5] Install Apache\n"
printf "[6] Install SSH\n"
printf "[7] Application Menu\n"
echo -e "$GREEN ----------------------------------------------------------- $COEND"
read test_menu3

case $test_menu3 in
1)
	echo -e "$RED [!] Removing Telnet $COEND"
	service rm telnet
	sleep 1
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu3
	
	;;
	
2)
	echo -e "$RED [!] Removing Apache $COEND"
	service apache stop
	service rm apache2
	sleep 1
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu3
	
	;;
	
3)
	echo -e "$RED [!] Removing OpenSSH $COEND"
	service ssh stop
	service rm ssh
	sleep 1
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu3
	
	;;
	
4)
	echo -e "$RED [!] Removing VSFTPD $COEND"
	service vsftpd stop
	service rm vsftpd
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu3
	
	;;
	
5)
	echo -e "$GREEN [+] Installing Apache $COEND"
	apt-get install apache2
	service apache2 start
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu3
	
	;;
	
6)
	echo -e "$GREEN [+] Installing SSH $COEND"
	apt-get install ssh
	service ssh start
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu3
	
	;;
	
7)
	echo -e "$YELLOW Proceeding to Menu... $COEND"
	sleep 1
	clear
	menu2
	
	;;
	
*)
	echo -e "$RED [!] Invalid Input $COEND"
	sleep 1
	clear
	menu3
	;;
	esac
}

menu3

ubuntu()
{
	echo "Ubuntu Firewall"

}

menu4()
{
clear
echo -e "$YELLOW #########~Ubuntu OS Firewall Options...?~################### $COEND"
echo -e "$RED [!] This will only work with the Ubuntu OS [!] $COEND"
echo "-----------------------------------------------------------"
printf "[1] Enable Firewall\n"
printf "[2] Disable Firewall\n"
printf "[3] Firewall Status\n"
printf "[4] Allow port 22\n"
printf "[5] Allow port 80\n"
printf "[6] Remove Firewall Rules\n"
printf "[7] Default Firewall (RESET)\n"
printf "[8] Install GUFW\n"
printf "[9] Application Menu\n"
echo -e "$GREEN ---------------------------------------------------------- $COEND"
read ubuntu_menu4
	
case $ubuntu_menu4 in
1)
	ufw enable
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu4

	;;

2)
	ufw disable
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu4

	;;

3)
	ufw status
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu4
	
	;;
	
4)
	ufw allow 22
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu4
	
	;;
	
5)
	ufw allow 80
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessfu... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu4
	
	;;
	
6)
	echo -e "$RED [!] Input Port $COEND"
	read Port
	ufw --force delete $Port
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu4
	
	;;
	
7)
	ufw default deny
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsucwcessful... \$COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu4
	
8)
	apt-get install UFW
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsucwcessful... \$COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu4
	
	;;
	
9)
	echo -e "$YELLOW Moving back to main menu... $COEND"
	sleep 1
	clear
	menu2
	
	;;
	
*)
	echo -e "$RED [!] Invalid Input $COEND"
	sleep 1
	clear
	menu4
	;;
	
	esac
}

menu4


userconfig()
{
	echo "Configuration"

}

menu5()
{
clear
echo -e "$YELLOW #########~Would you like to remove any services...?~################### $COEND"
printf "[1] Add User\n"
printf "[2] Remove User\n"
printf "[3] Modify A Users Name\n"
printf "[4] Change a users passwd\n"
printf "[5] Delete Users Home DIR\n"
printf "[6] Add User to Group\n"
printf "[7] Remove User from Group\n"
printf "[8] Applicaiton Menu\n"
echo -e "$GREEN ----------------------------------------------------------- $COEND"
read userconfig_menu5

case $userconfig_menu5 in
1)
	echo "What user would you like to create?"
	read $USER
	adduser $USER
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu5
	
	;;
	
2)
	echo "What user would you like to remove?"
	read $USER
	deluser $USER
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu5
	
	;;
	
3)
	echo "What is the new username?"
	read new_username
	echo "What is the old username?"
	read old_username
	usermod -l $new_username $old_username
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu5
	
	;;
	
4)
	echo "What user pass would you like to change?"
	read $USER_NAME
	passwd $USER_NAME
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu5
	
	;;
	
5)
	echo "What user HOME DIR would you like to remove? (Write file path /home/username)"
	read $FILE_PATH
	rm -r $FILE_PATH #/home/username
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu5
	
	;;
	
6)
	echo "What user are you moving?"
	read $USER
	echo "What is the destination for the user?"
	read $DESTINATION
	usermod -a -G $DESTINATION $USER
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COEND"
	fi
	read WAIT_FOR_USER
	clear
	menu5
	
	;;
	
7)
	echo "What is the username?"
	read $USER
	echo "What is the group name?"
	read $GROUP
	deluser $USER $GROUP
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Success... $COEND"
	else
		echo -e "$RED [!] Unsuccessful... $COCEND"
	fi
	read WAIT_FOR_USER
	clear
	menu5
	
8)
	echo -e "$YELLOW Proceeding to Menu... $COEND"
	sleep 1
	clear
	menu2
	
	;;
	
*)
	echo -e "$RED [!] Invalid Input $COEND"
	sleep 1
	clear
	menu5
	;;
	esac
}

menu5
