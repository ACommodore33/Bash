#!/bin/bash
#V15

ssh()
{

	# This will change the 'PermitRootLogin yes' to 'PermitRootLogin no'.
	# This will also disallow X11 Forwarding.
	
		if grep -Fxq "PermitRootLogin yes" /etc/ssh/sshd_config; then
		echo "[!] SSH ROOT login is enabled!"
		sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config &>/dev/null
		echo "[+] SSH ROOT login is disabled!"
		sleep 3
	
	fi
	
		if grep -Fxq "X11Forwarding yes" /etc/ssh/sshd_config; then
		echo "[!] X11 Forwarding is enabled!"
		sed -i 's/X11Forwarding yes/X11Forwarding no/g' /etc/ssh/sshd_config &>/dev/null
		echo "[+] X11 Forwarding has been disabled!"
		sleep 3
	
	fi
}	

firewall()
{

	# Sets the firewall to default standards
	# Enables the firewall
	
	ufw enable
	echo 'y' ufw reset
}

updates() 
{

	# Updates and Upgrades
	
	apt-get update && apt-get dist-upgrade -y
	
	# Checks for daily updates
	
    if grep -q "APT::Periodic::Update-Package-Lists \"1\";" /etc/apt/apt.conf.d/10periodic; then
        echo "[!] Daily updates check already configured!"
		read WAIT_FOR_USER
    else
        sed -i 's/APT::Periodic::Update-Package-Lists "0";/APT::Periodic::Update-Package-Lists "1";/g' /etc/apt/apt.conf.d/10periodic
        echo "[+] Daily updates configured"
		read WAIT_FOR_USER
    fi
}

passwordpolicy()
{

	# This will set the password policy for common-password & login.defs.
	# Also this will install libpam-cracklib for /etc/pam.d/common-password.
	
	apt-get update && apt-get install libpam-cracklib -y
    if grep -q "ucredit=-1 lcredit=-2 dcredit=-1" /etc/pam.d/common-password; then
        echo "[+] /etc/pam.d/common-password already configured"
		read WAIT_FOR_USER
    else
        echo "password   requisite    pam_cracklib.so retry=3 minlen=10 difok=3 ucredit=-1 lcredit=-2 dcredit=-1" >> /etc/pam.d/common-password
		echo "[+] /etc/pam.d/common-password set."
		read WAIT_FOR_USER
    fi

    sed -i 's/PASS_MAX_DAYS	99999/PASS_MAX_DAYS	150/g' /etc/login.defs
    sed -i 's/PASS_MIN_DAYS	0/PASS_MAX_DAYS	7/g' /etc/login.defs
    echo "[+] Password Policy set in /etc/pam.d/common-password and /etc/login.defs"
	read WAIT_FOR_USER
}

media()
{

	# Finds and lists media files with the following extensions.
	
	find / -name "*.mp3"
	find / -name "*.mp4"
	find / -name "*.gif"
	find / -name "*.jpg"
	find / -name "*.jpeg"
	find / -name "*.png"
	"[+] Listed all media files with the following extensions...""
	read WAIT_FOR_USER
}

accounts()
{

	# Disables the guest account
	# Hides the userlist from the login screen.     THIS HAPPENS BY ADDING LINES INTO THE FILE, AS THEY'RE PROBABLY ABSENT.
	# Changes the root password
	# Disables the root account
	
	echo 'allow-guest=false' >> /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf
	echo 'greeter-hide-users=true' >> /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf
	echo "[+] Lines added to file" 
	sleep 3
	
	passwd root 
	passwd -l root
	echo "[+] New ROOT passwd and locked ROOT account."
}

rmhack()
{
	# Attempts to uninstall hacking tools that are currently existing.
	
	apt-get --purge autoremove john
	apt-get --purge autoremove hydra
	apt-get --purge autoremove nmap
	apt-get --purge autoremove netcat
	apt-get --purge autoremove aircrack-ng
	apt-get --purge autoremove wireshark
	apt-get --purge autoremove kismet
}

crontab()
{

	# Checks the scheduled jobs
	echo "Listing /etc/cron* directories"
	ls -la /etc/cron*
	read WAIT_FOR_USER
	echo "Listing root crontab"
	crontab -l
	read WAIT_FOR_USER
}

services()
{

	# Prompts the user for removal of services.
	
	echo "Would you like to remove bind9? -DNS Server- (y/n)"
	read $REPLY
	
	if [ $REPLY = 'y' ]; then
		apt-get --purge autoremove bind9 &>/dev/null
		echo "[+] Bind9 DNS Server has been removed"
		read WAIT_FOR_USER
	else
		echo "[!] Could not remove Bind9 or it isn't there."
		read WAIT_FOR_USER
	fi
	
	echo "Would you like to remove apache2? (y/n)"
	read $REPLY
	
	if [ $REPLY = 'y' ]; then
		apt-get --purge autoremove apache2 &>/dev/null
		echo "[+] Apache2 has been removed."
		read WAIT_FOR_USER
	else
		echo "[!] Could not remove Apache2 / Apache2 isn't installed."
		read WAIT_FOR_USER
	fi
	
	echo "Would you like to remove VSFTPD? -FTP- (y/n)"
	read $REPLY
	
	if [ $REPLY = 'y' ]; then
		apt-get --purge autoremove vsftpd &>/dev/null
		echo "[+] VSFTPD has been removed."
		read WAIT_FOR_USER
	else
		echo "[!] Could not remove VSFTPD / VSFTPD isn't installed."
		read WAIT_FOR_USER
	fi
	
	echo "Would you like to remove SSH? (y/n)"
	read $REPLY
	
	if [ $REPLY = 'y' ]; then
		apt-get --purge autoremove ssh &>/dev/null
		echo "[+] SSH has been removed."
		read WAIT_FOR_USER
	else
		echo "[!] Could not remove SSH / SSH isn't installed."
		read WAIT_FOR_USER
	fi
}

check()
{

	if [ $(dpkg-query -W -f='${Status}' chkrootkit 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
		dpkg-query -l htop
		echo "dpkg-query: [+] Packages found matching 'chkrootkit'."
	else
		echo "[!] No packages found matching 'chkrootkit'."
		apt-get install chkrootkit -y
	fi
	
	if [ $(dpkg-query -W -f='${Status}' rkhunter 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
		dpkg-query -l htop
		echo "dpkg-query: [+] Packages found matching 'rkhunter'."
	else
		echo "[!] No packages found matching 'rkhunter'."
		apt-get install rkhunter -y
	fi
	
	if [ $(dpkg-query -W -f='${Status}' tiger 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
		dpkg-query -l htop
		echo "dpkg-query: [+] Packages found matching 'tiger'."
	else
		echo "[!] No packages found matching 'tiger'."
		apt-get install tiger -y
	fi
}

if [ 1 = 1 ]; then
		ssh
		firewall
		updates
		passwordpolicy
		media
		accounts
		rmhack
		crontab
		#services
		#check
else
		echo "exit"
		exit
fi
