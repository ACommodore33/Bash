#!/bin/bash
#V14

### Color Output
#RED="\033[01;31m"      # Errors
#GREEN="\033[01;32m"    # Success
#YELLOW="\033[01;33m"   # Warnings/Information
#BLUE="\033[01;34m"     # Heading
#BOLD="\033[01;01m"     # Highlight
#COEND="/e[0m"          # Ending Phrase
#RESET="\033[00m"       # Normal

htop(){

	# These two if statements will determine if the 'htop' packages
	# are installed. If they are not, then the user will be prompted
	# for installation. If they are, the user will not be prompted for
	# installation of 'htop'. 

	clear
	if [ $(dpkg-query -W -f='${Status}' htop 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
		dpkg-query -l htop
		echo -e "$BLUE dpkg-query: [+] Packages found matching 'htop'. $COEND"
	else
		echo -e "$RED [!] No packages found matching 'htop'. $COEND"
		echo "Would you like to install HTOP? (y/n)"
		echo "-------------------------------------"
		read $REPLY
		
		if [ $REPLY = 'y' ]; then
			apt-get install htop
		else
			echo "Not installing htop."
		fi
	fi
}

large_config(){
	
	# Changes the ROOT password & disables the account overall.
	# Disables the guest account.
	# Hides userlist from login screen.
	# Copies passwd, group, and shadow files to a dir named 'UGP'
	
	# Moving passwd/group/shadow files to UGP dir.
	
	if [ grep 'UGP' = 1 ]; then
		mkdir UGP
		cp /etc/passwd UGP
		cp /etc/group UGP
		cp /etc/shadow UGP
		echo -e "$GREEN [+] Dir 'UGP' has been created. $COEND"
	else
		echo "[+] Dir 'UGP' already exists"
	fi
	
	# Disables the guest account & Hides the userlist from the login screen.
																											# allow-guest= false | greeter-hide-users= true | # out autologon
	sed -i 's/allow-guest=true/allow-guest-false/g' /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Guest account/Userlist have been configured. $COEND"
		read WAIT_FOR_USER
	else
		echo -e "$RED [!] Couldn't configure /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf"
		read WAIT_FOR_USER
	fi
	
	# Hides the userlist from the login screen.
	
	sed -i 's/greeter-hide-users=false/greeter-hide-users=true/g' /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf 2>&1>/dev/null 
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] Userlist has been configured. $COEND"
		read WAIT_FOR_USER
	else
		echo -e "$RED [!] Couldn't configure /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf $COEND"
		read WAIT_FOR_USER
	fi
	
	# Root password change.
	passwd
	
	# Disable root account.
	echo "root:"'$1$FvmieeAj$cDmFLn5RvjYphj3iL1RJZ/' | chpasswd -e
    passwd -l root 2>&1>/dev/null
	echo -e "$GREEN [+] Root account has been locked. $COEND"
	read WAIT_FOR_USER
}

password_policy(){

	# This will set the password policy for common-password & login.defs.
	# Also this will install libpam-cracklib for /etc/pam.d/common-password.
	
	apt-get update && apt-get install libpam-cracklib
    if grep -q "ucredit=-1 lcredit=-2 dcredit=-1" /etc/pam.d/common-password; then
        echo "[+] /etc/pam.d/common-password already configured"
		read WAIT_FOR_USER
    else
        echo "password   requisite    pam_cracklib.so retry=3 minlen=10 difok=3 ucredit=-1 lcredit=-2 dcredit=-1" >> /etc/pam.d/common-password
		echo "[+] /etc/pam.d/common-password set."
		read WAIT_FOR_USER
    fi

    sed -i 's/PASS_MAX_DAYS	99999/PASS_MAX_DAYS	150/g' /etc/login.defs
    sed -i 's/PASS_MIN_DAYS	0/PASS_MAX_DAYS	7/g' /etc/login.defs
    echo "[+] Password Policy set in /etc/pam.d/common-password and /etc/login.defs"
	read WAIT_FOR_USER
}

ssh(){

	# This will change the permit root login of /etc/ssh/sshd_config.
	# to no, if it has the line 'PermitRootLogin yes'.
	
	if grep -Fxq "PermitRootLogin yes" /etc/ssh/sshd_config; then
        echo "[!] Root SSH login is enabled!"
        sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config &>/dev/null
        echo "[+] Root SSH login has been disabled."
		read WAIT_FOR_USER
    fi
	
	if grep -Fxq "X11Forwarding yes" /etc/ssh/sshd_config; then
		echo "[!] X11 Forwarding is enabled!"
        sed -i 's/X11Forwarding yes/X11Forwarding no/g' /etc/ssh/sshd_config &>/dev/null
        echo "[+] X11 Forwarding has been disabled."
		read WAIT_FOR_USER
    fi
}

firewall(){

	# Sets the firewall to default standards
	# Enables the firewall
	# Lists the allowed ports of the firewall
	
	ufw default deny &>/dev/null
	ufw enable
	ufw status numbered
	read WAIT_FOR_USER
}

services(){

	# Prompts the user for removal of services.
	
	echo "Would you like to remove bind9? -DNS Server- (y/n)"
	read $REPLY
	
	if [ $REPLY = 'y' ]; then
		apt-get -purge remove bind9 &>/dev/null
		echo -e "$GREEN [+] Bind9 DNS Server has been removed $COEND"
		read WAIT_FOR_USER
	else
		echo -e "$RED [!] Could not remove Bind9 or it isn't there. $COEND"
		read WAIT_FOR_USER
	fi
	
	echo "Would you like to remove apache2? (y/n)"
	read $REPLY
	
	if [ $REPLY = 'y' ]; then
		apt-get -purge remove apache2 &>/dev/null
		echo -e "$GREEN [+] Apache2 has been removed. $COEND"
		read WAIT_FOR_USER
	else
		echo -e "$RED [!] Could not remove Apache2 / Apache2 isn't installed. $COEND"
		read WAIT_FOR_USER
	fi
	
	echo "Would you like to remove VSFTPD? -FTP- (y/n)"
	read $REPLY
	
	if [ $REPLY = 'y' ]; then
		apt-get -purge remove vsftpd &>/dev/null
		echo -e "$GREEN [+] VSFTPD has been removed. $COEND"
		read WAIT_FOR_USER
	else
		echo -e "$RED [!] Could not remove VSFTPD / VSFTPD isn't installed. $COEND"
		read WAIT_FOR_USER
	fi
	
	echo "Would you like to remove SSH? (y/n)"
	read $REPLY
	
	if [ $REPLY = 'y' ]; then
		apt-get -purge remove ssh
		echo -e "$GREEN [+] SSH has been removed. $COEND"
		read WAIT_FOR_USER
	else
		echo -e "$RED [!] Could not remove SSH / SSH isn't installed. $COEND"
		read WAIT_FOR_USER
	fi
}


ports(){

	# Shows all open ports on the system.
	
	echo "[+] Listing all open ports"
	
	netstat -tulpna | grep LISTEN
	read WAIT_FOR_USER
}

media(){

	# Finds and lists the media files selected for search.
	
	find / -name "*.mp3"
	find / -name "*.mp4"
	find / -name "*.gif"
	find / -name "*.jpg"
	find / -name "*.jpeg"
	find / -name "*.png"
	find / -name "*.exe"
	echo -e "$GREEN [+] Listed media/exec files. $COEND"
	read WAIT_FOR_USER
}

crontab(){

	# Checks the scheduled jobs
	echo "Listing /etc/cron* directories"
	ls -la /etc/cron*
	read WAIT_FOR_USER
	echo "Listing root crontab"
	crontab -l
	read WAIT_FOR_USER
}

updates(){
	
	# Makes sure sources are added
    if grep -q "deb http://security.ubuntu.com/ubuntu/ precise-security restricted main multiverse universe" /etc/apt/sources.list; then
        echo "[!] Security source already installed!"
		read WAIT_FOR_USER
    else
        echo "deb http://security.ubuntu.com/ubuntu/ precise-security restricted main multiverse universe" >> /etc/apt/sources.list
        echo "[+] Security source added"
		read WAIT_FOR_USER
    fi

    if grep -q "deb http://us.archive.ubuntu.com/ubuntu/ precise-updates restricted main multiverse universe" /etc/apt/sources.list; then
        echo "[!] Updates source already installed!"
		read WAIT_FOR_USER
    else
        echo "deb http://us.archive.ubuntu.com/ubuntu/ precise-updates restricted main multiverse universe" >> /etc/apt/sources.list
        echo "[+] Updates source added"
		read WAIT_FOR_USER
    fi

    if grep -q "deb http://us.archive.ubuntu.com/ubuntu/ precise-backports restricted main multiverse universe" /etc/apt/sources.list; then
        echo "[!] Backports source already installed!"
		read WAIT_FOR_USER
    else
        echo "deb http://us.archive.ubuntu.com/ubuntu/ precise-backports restricted main multiverse universe" >> /etc/apt/sources.list
        echo "[+] Backports source added"
		read WAIT_FOR_USER
    fi

    # Check for updates daily
	
    if grep -q "APT::Periodic::Update-Package-Lists \"1\";" /etc/apt/apt.conf.d/10periodic; then
        echo "[!] Daily updates check already configured!"
		read WAIT_FOR_USER
    else
        sed -i 's/APT::Periodic::Update-Package-Lists "0";/APT::Periodic::Update-Package-Lists "1";/g' /etc/apt/apt.conf.d/10periodic
        echo "[+] Daily updates configured"
		read WAIT_FOR_USER
    fi

	# Updates and upgrades the system
	
    apt-get update && apt-get dist-upgrade &>/dev/null
	
	if [ $? -eq 0 ]; then
		echo -e "$GREEN [+] The system has been updated/upgraded. $COEND"
		read WAIT_FOR_USER
	else
		echo -e "$GREEN [!] The system has not been updated. $COEND"
		read WAIT_FOR_USER
	fi
}

if [ 1 = 1 ]; then
	htop                                          # Make sure to check if any functions aren't being called.
	large_config								   # Last time you didn't check now did you? { Note to self }
	password_policy
	ssh
	firewall
	services
	ports
	media
	crontab
	updates
else
	echo "Exit"
	exit
fi
