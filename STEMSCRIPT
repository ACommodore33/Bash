#!/bin/bash
#V3

# If you're of another CyberPatriot team or aren't a member of the team 'Marine Raiders' 08-8142.
# It is against the rules of the competition to use this script, so please, abide by this regulation.

### IT IS REQUIRED THAT YOU RUN THIS SCRIPT IN ROOT ###

if [ $EUID -ne 0 ]; then
	echo "[!] You are not Root! Quitting..."
	exit
else
	clear
fi

### Functions ###

start(){
	
	### Creating our log files in the /var/log/ directory ###

	touch /var/log/infosec.log  # Success / Fail file
	touch /var/log/infosec2.log # Pass function file
	touch /var/log/infosec3.log # List of all ftpusers

	### This is the order of functions listed in the infosec.log file for organization ###

	echo -Order of Functions- >> /var/log/infosec.log
	echo pass >> /var/log/infosec.log
	echo firewall >> /var/log/infosec.log
	echo ssh >> /var/log/infosec.log
	echo policy >> /var/log/infosec.log
	echo audit >> /var/log/infosec.log
	echo media >> /var/log/infosec.log
	echo accounts >> /var/log/infosec.log
	echo purge_atd >> /var/log/infosec.log
	echo services >> /var/log/infosec.log
	echo cron >> /var/log/infosec.log
	echo backdoors >> /var/log/infosec.log
	echo syncookies >> /var/log/infosec.log
	echo tuning >> /var/log/infosec.log
	echo FTPanonup >> /var/log/infosec.log
	echo disable_comp >> /var/log/infosec.log
	echo apache >> /var/log/infosec.log
	echo disable_avahi >> /var/log/infosec.log
	echo rmhack >> /var/log/infosec.log
	echo purge_nfs >> /var/log/infosec.log
	echo purge_whoopsie >>/var/log/infosec.log
	echo sud0ers >> /var/log/infosec.log
	echo updates >> /var/log/infosec.log
	echo ------------------------------- >> /var/log/infosec.log
}

ssh(){
	
	### Permits root login from 'YES' to 'NO' ###
	
	if grep -Fxq "PermitRootLogin yes" /etc/ssh/sshd_config; then
		sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config &>/dev/null
		echo $(date): echo "[+] SSH ROOT login is disabled!" >> /var/log/infosec.log
	fi
	
	### Changes X11Forwarding from 'YES' to 'NO' ###
	
	if grep -Fxq "X11Forwarding yes" /etc/ssh/sshd_config; then
		sed -i 's/X11Forwarding yes/X11Forwarding no/g' /etc/ssh/sshd_config &>/dev/null 
		echo $(date): echo "[+] X11 Forwarding has been disabled!" >> /var/log/infosec.log
	fi
	
	### Permits empty passwords from 'YES' to 'NO' ###
	
	if grep -Fxq "PermitEmptyPasswords yes" /etc/ssh/sshd_config; then
		sed -i 's/PermitEmptyPasswords yes/PermitEmpyPasswords no/g' /etc/ssh/sshd_config &>/dev/null
		echo $(date): echo "[+] SSH PermitEmptyPasswords is disabled!" >> /var/log/infosec.log
	fi
	
	### Changes protocol 1 to 2 ###
	
	if grep -Fxq "Protocol 1" /etc/ssh/sshd_config; then
		sed -i 's/Protocol 1/Protocol 2/g' /etc/ssh/sshd_config &>/dev/null
		echo $(date): echo "[+] Protocol 1 changed to Protocol 2!" >> /var/log/infosec.log
	fi
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] SSH Configurations fully set!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

purge_atd(){
	
	### Less layers ###
	
	apt-get --yes purge at

	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Removed atd!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

services(){

	### Listing all services ###
	service --status-all | less -P
	echo "[!] Press 'Enter' when ready."
	read WAIT_FOR_USER
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] SSH Configurations set!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

firewall(){
	
	### Enables the firewall ###
	### Denies all ports other than the default standard ###
	
	ufw enable
	ufw default deny
	
	### This will allow only 6 connections every 30 seconds from the same IP addr ###
	
	ufw limit OpenSSH
	
	### Allows the ports (80,443) ###
	
	ufw allow 80 
	ufw allow 443
	
	### Blocking of various ports  ###
	
        iptables -A INPUT -p tcp -s 0/0 -d 0/0 --dport 23 -j DROP         #Block Telnet
        iptables -A INPUT -p tcp -s 0/0 -d 0/0 --dport 2049 -j DROP       #Block NFS
        iptables -A INPUT -p udp -s 0/0 -d 0/0 --dport 2049 -j DROP       #Block NFS
        iptables -A INPUT -p tcp -s 0/0 -d 0/0 --dport 6000:6009 -j DROP  #Block X-Windows
        iptables -A INPUT -p tcp -s 0/0 -d 0/0 --dport 7100 -j DROP       #Block X-Windows font server
        iptables -A INPUT -p tcp -s 0/0 -d 0/0 --dport 515 -j DROP        #Block printer port
        iptables -A INPUT -p udp -s 0/0 -d 0/0 --dport 515 -j DROP        #Block printer port
        iptables -A INPUT -p tcp -s 0/0 -d 0/0 --dport 111 -j DROP        #Block Sun rpc/NFS
        iptables -A INPUT -p udp -s 0/0 -d 0/0 --dport 111 -j DROP        #Block Sun rpc/NFS
        iptables -A INPUT -p all -s localhost  -i eth0 -j DROP            #Deny outside packets from internet which claim to be from your loopback interface.
  
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Firewall configurations set!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

updates(){

	### Updates and Upgrades ###
	
	apt-get update && apt-get dist-upgrade -y
	apt-get --yes --force-yes autoremove
	apt-get --yes --force-yes autoclean
	
	### Checks for daily updates ###
	
	if grep -q "APT::Periodic::Update-Package-Lists \"1\";" /etc/apt/apt.conf.d/10periodic; then
        echo $(date): echo "[!] Daily updates check already configured!"
		sleep 3
	else
        sed -i 's/APT::Periodic::Update-Package-Lists "0";/APT::Periodic::Update-Package-Lists "1";/g' /etc/apt/apt.conf.d/10periodic >> /var/log/infosec.log 
		echo $(date): echo "[+] Daily updates configured"
	fi
	
	### Allow unattended updates ###
	
	apt-get install unattended-upgrades -y -qq
	echo -e "APT::Periodic::Update-Package-Lists \"1\";"           >> /etc/apt/apt.conf.d/10periodic
	echo -e "APT::Periodic::Download-Upgradeable-Packages \"1\";"  >> /etc/apt/apt.conf.d/10periodic
	echo -e "APT::Periodic::AutocleanInterval \"7\";"              >> /etc/apt/apt.conf.d/10periodic
	echo -e "APT::Periodic::Unattended-Upgrade \"1\";"             >> /etc/apt/apt.conf.d/10periodic
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Ran through updates, affirmed daily updates, and allowed unattended updates!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi

	clear
}

policy(){

	### Libpam-Cracklib installation ###
	
	apt-get update && apt-get install libpam-cracklib -y
	
	### Common-Password ###
	
        echo "password   requisite    pam_cracklib.so retry=3 minlen=10 difok=3 ucredit=-1 lcredit=-2 dcredit=-1" >> /etc/pam.d/common-password
    	
        ### Common-Auth ###
    	
        echo "auth optional pam_tally.so deny=5 unlock_time=900 onerr=fail audit even_deny_root_account silent" >> /etc/pam.d/common-auth
    	
        ### Login.defs ###

        sed -i 's/PASS_MAX_DAYS	99999/PASS_MAX_DAYS 150/g' /etc/login.defs
        sed -i 's/PASS_MIN_DAYS	0/PASS_MIN_DAYS	7/g' /etc/login.defs
        sed -i 's/PASS_WARN_AGE 0/PASS_WARN_AGE 7 /g' /etc/login.defs
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Libpam-cracklib installed and password policys set!"
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

finder(){

	### Deletes all media files of the following listed types  ###
	
	find / -name "*.mp3" -type f -delete
	find / -name "*.mp4"  -type f -delete
	find / -name "*.gif" -type f -delete
	find / -name "*.jpg" -type f -delete
	find / -name "*.jpeg" -type f -delete
	find / -name "*.png" -type f -delete
	find / -name "*.mov" -type f -delete
	find / -name "*.wav" -type f -delete
 	find / -name "*.wmv" -type f -delete
 	find / -name "*.avi" -type f -delete
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Listed all media files with the following extenions!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

accounts(){
	
	# Ubuntu Versions 14.04
	# echo 'allow-guest=false' >> /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf
	# echo 'greeter-hide-users=true' >> /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf
	# sed -i 's/greeter-hide-users=false/greeter-hide-users=true/g' /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf
	# sed -i 's/allow-guest=true/allow-guest=false/g' /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf
	
	# Ubuntu Versions 12.04
	echo 'allow-guest=false' >> /etc/lightdm/lightdm.conf
	sed -i 's/allow-guest=true/allow-guest=false/g' /etc/lightdm/lightdm.conf
	sed -i 's/greeter-hide-users=false/greeter-hide-users=true/g' /etc/lightdm/lightdm.conf

	### Changes the root password ###
	
	passwd root
	
	### Locks the root account ###
	
	passwd -l root

	### Changes all user passwords to 'Cyb3rP4tr10t5' ###

        pass='Cyb3rP4tr10t5'

        for i in $(ls /home); do
        chpasswd <<< "$i:$pass"
        done
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Disabled the guest user account and hid userlist from login!" >> /var/log/infosec.log
		echo $(date):	echo "[+] ROOT passwd set and locked the ROOT user account!" >> /var/log/infosec.log
		echo $(date):   echo "[+] All user passwords set to 'Cyb3rP4tr10t5" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

purge_nfs() {
	
    	# This the standard network file sharing for Unix/Linux/BSD
	# style operating systems.
	# Unless you require to share data in this manner,
	# less layers = more sec
	
	apt-get --yes purge nfs-kernel-server nfs-common portmap rpcbind autofs
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Removed standard network file sharing!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

purge_whoopsie() {
    
        ### Less layers ### 
    
        apt-get --yes purge whoopsie
    
        if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Removed whoopsie!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

disable_avahi(){
	
	### The Avahi daemon provides mDNS / DNS-SD discovery support ###
	### (Bonjour/Zeroconf) allowing applications to discover services on the network. ###
	
        update-rc.d avahi-daemon disable
        
        if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Disables the Avahi daemon!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

rmhack(){

	# Attempts to uninstall hacking tools that are currently existing / services ETC ETC ETC
	# Anything listed that isn't present will output 'Package 'bind9' is not installed, so not removed'.
	# So you'll have a pretty good idea of what is present or what should be present.
	
	apt-get --purge autoremove nmap	     # Scanning
	apt-get --purge autoremove wireshark # Scanning
	apt-get --purge autoremove kismet    # Wireless
	apt-get --purge autoremove telnet    # Insecure Transfer
	apt-get --purge autoremove bind9     # DNS 
	apt-get --purge autoremove apache2   # Webserver
	apt-get --purge autoremove vsftpd    # FTP
	apt-get --purge autoremove ssh       # SecureShell
	apt-get --purge autoremove samba     # File Sharing
	
	### Removes all of the hacking tools associated with the kali-linux operating system ###
	
	apt-get autoremove --purge --force-yes -y airbase-ng acccheck ace-voip amap apache-users arachni android-sdk apktool arduino armitage asleap automater \
	backdoor-factory bbqsql bed beef bing-ip2hosts binwalk blindelephant bluelog bluemaho bluepot blueranger bluesnarfer bulk-extractor \
	bully burpsuite braa \
	capstone casefile cdpsnarf cewl chntpw cisco-auditing-tool cisco-global-exploiter cisco-ocs cisco-torch cisco-router-config cmospwd \
	cookie-cadger commix cowpatty crackle creddump crunch cryptcat cymothoa copy-router-config cuckoo cutycapt \
	davtest dbd dbpwaudit dc3dd ddrescue deblaze dex2jar dff dhcpig dictstat dirb dirbuster distorm3 dmitry dnmap dns2tcp dnschef dnsenum \
	dnsmap dnsrecon dnstracer dnswalk doona dos2unix dotdotpwn dradis dumpzilla \
	eapmd5pass edb-debugger enum4linux enumiax exploitdb extundelete \
	fern-wifi-cracker fierce fiked fimap findmyhash firewalk fragroute foremost funkload \
	galleta ghost-fisher giskismet grabber go-lismero goofile gpp-decrypt gsad gsd gqrx guymager gr-scan \
	hamster-sidejack hash-identifier hexinject hexorbase http-tunnel httptunnel hping3 hydra \
	iaxflood inguma intrace inundator inviteflood ipv6-toolkit iphone-backup-analyzer intersect ismtp isr-evilgrade \
	jad javasnoop jboss-autopwn jd-gui john johnny joomscan jsql \
	kalibrate-rtl keepnote killerbee kismet keimpx \
	linux-exploit-suggester ldb lynis \
	maltego-teeth magictree masscan maskgen maskprocessor mdk3 metagoofil metasploit mfcuk mfoc mfterm miranda mitmproxy multiforcer \
	multimon-ng \
	ncrack netcat nishang nipper-ng nmap ntop \
	oclgausscrack ohwurm ollydpg openvas-administrator openvas-cli openvas-manager openvas-scanner oscanner \
	p0f padbuster paros parsero patator pdf-parser pdfid pdgmail peepdf phrasendrescher pipal pixiewps plecost polenum policygen \
	powerfuzzer powersploit protos-sip proxystrike pwnat \
	rcrack rcrack-mt reaver rebind recon-ng redfang regripper responder ridenum rsmangler rtlsdr-scanner rtpbreak rtpflood rtpinsertsound \
	rtpmixsound \
	sakis3g sbd sctpscan setoolkit sfuzz shellnoob sidguesser siparmyknife sipp sipvicious skipfish slowhttptest smali smtp-user-enum \
	sniffjoke snmpcheck spooftootph sslcaudit sslsplit sslstrip sslyze sqldict sqlmap sqlninja sqlsus statprocessor \
	t50 termineter thc-hydra thc-ipv6 thc-pptp-bruter thc-ssl-dos tnscmd10g truecrack theharverster tlssled twofi \
	u3-pwn uatester urlcrazy uniscan unix-privesc-check vega w3af webscarab webshag webshells webslayer websploit weevely wfuzz wifi-honey \
	wifitap wifite wireshark winexe wpscan wordlists valgrind volatility voiphopper wol-e xspy xplico xsser yara yersinia zaproxy
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Removed any of the potential hacking tools present!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}
	
sud0ers(){

	### Removes Any Instances of 'NOPASSWD' in Sudoers ###

       sed -i s/NOPASSWD:// /etc/sudoers
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Removed any instances of 'NOPASSWD' in Sudoers" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

cron(){

	### Checks the scheduled jobs ###
	
	ls -la /etc/cron*
	echo "[!] Press 'Enter' when ready."
	read WAIT_FOR_USER
	clear
	
	### Lists the users crontab ###
	
	crontab -l
	echo "[!] Press 'Enter' when ready."
	read WAIT_FOR_USER
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Listed scheduled jobs and the users crontab" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

backdoors(){
	
	### Lists potential backdoors ###
	
	netstat -tulpna | grep "LISTEN"
	echo "[!] Press 'Enter' when ready."
	read WAIT_FOR_USER
	clear
	
	### Listing the contents of /var/www/ ###
	
	ls -la /var/www/
	echo "[!] Press 'Enter' when ready."
	read WAIT_FOR_USER
	clear
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Listed the requested items" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

syncookies(){

	### Sets the syncookie value to '1' ###
	
	sysctl -w net.ipv4.tcp_syncookie=1
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Set the syncookie value to '1'!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

tuning(){

	### Kernel Tuning ###

	sysctl kernel.randomize_va_space=1
    
        ### Enable IP spoofing protection ###
        
        sysctl net.ipv4.conf.all.rp_filter=1

        ### Disable IP source routing ###
        
        sysctl net.ipv4.conf.all.accept_source_route=0
    
        ### Ignoring broadcasts request ###
        
        sysctl net.ipv4.icmp_echo_ignore_broadcasts=1
        
        ### Make sure spoofed packets get logged ###
        
        sysctl net.ipv4.conf.all.log_martians=1
        sysctl net.ipv4.conf.default.log_martians=1

        ### Disable ICMP routing redirects ###
        
        sysctl -w net.ipv4.conf.all.accept_redirects=0
        sysctl -w net.ipv6.conf.all.accept_redirects=0
        sysctl -w net.ipv4.conf.all.send_redirects=0

        ### Disables the magic-sysrq key ###
        
        sysctl kernel.sysrq=0
    
        ### Turn off the tcp_timestamps ###
        
        sysctl net.ipv4.tcp_timestamps=0

        ### Enable bad error message Protection ###
        
        sysctl net.ipv4.icmp_ignore_bogus_error_responses=1
    
        ### RELOAD WITH NEW SETTINGS ###
        sysctl -p
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Kernel tuning configurations are set and reloaded!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

disable_comp(){
	
	### Disables multiple compilers ###

        chmod 000 /usr/bin/byacc
        chmod 000 /usr/bin/yacc
        chmod 000 /usr/bin/bcc
        chmod 000 /usr/bin/kgcc
        chmod 000 /usr/bin/cc
        chmod 000 /usr/bin/gcc
        chmod 000 /usr/bin/*c++
        chmod 000 /usr/bin/*g++
        
        # 755 to bring them back online
        # It is better to restrict access to them
        # unless you are working with a specific one
        
        if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Disabled compilers that are present!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

FTPanonup(){
	
	### Copies the contents of the 'ftpusers' file to /var/log/infosec4.log ###
	
	ls -la /etc/ftpusers/ >> /var/log/infosec3.log
	
	### Deletes the FTP user ###
	
	userdel ftp &>/dev/null
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Logged /etc/ftpusers to /var/log/infosec3.log and deleted the FTP user!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

apache(){

	### Apache2 security configurations ###
	
	if [ -e /etc/apache2/apache2.conf ]; then
		echo \<Directory \> >> /etc/apache2/apache2.conf
		echo -e ' \t AllowOverride None' >> /etc/apache2/apache2.conf
		echo -e ' \t Order Deny,Allow' >> /etc/apache2/apache2.conf
		echo -e ' \t Deny from all' >> /etc/apache2/apache2.conf
		echo \<Directory \/\> >> /etc/apache2/apache2.conf
		echo UserDir disabled root >> /etc/apache2/apache2.conf
	fi
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Secured apache2!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

audit(){

	### Updates the audit policy ###
	
	apt-get install auditd -y
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] Audit policy updated!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

pass(){

	### Logs the contents of the following below in /var/log/infosec2.log ###
	
	cat /etc/passwd >> /var/log/pass.log
	echo "---------------" >> /var/log/infosec2.log
	cat /etc/group >> /var/log/infosec2.log
	echo "---------------" >> /var/log/infosec2.log
	cat /etc/gshadow >> /var/log/infosec2.log
	echo "---------------" >> /var/log/infosec2.log
	cat /etc/shadow >> /var/log/infosec2.log
	
	if [ $? -eq 0 ]; then
		echo $(date):	echo "[+] /etc/passwd|/etc/group/|/etc/gshadow/|/etc/shadow/ logged to '/var/log/infosec2.log'!" >> /var/log/infosec.log
	else
		echo $(date):	echo "[!] Could not set configurations!" >> /var/log/infosec.log
	fi
	
	clear
}

### Calling out main functions through 'evergreen' ###

evergreen(){
	
	start            #IGS /
	pass		 #IGS /
	firewall 	 #IGS /
	ssh		 #IGS /
	policy 		 #IGS /
	audit            #IGS /
	finder		 #IGS /
	accounts 	 #IGS / 
	purge_atd        #IGS /
	services         #IGS /
	cron	 	 #IGS /
	backdoors 	 #IGS /
	syncookies       #IGS /
	tuning           #IGS /
	FTPanonup	 #IGS /
	disable_comp     #IGS /
	apache		 #IGS /
	disable_avahi    #IGS /
	rmhack           #IGS /
	purge_nfs       #IGS /
	purge_whoopsie  #IGS /
	sud0ers          #IGS /
	updates 	 #IGS /
}

evergreen
